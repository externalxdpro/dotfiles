#+TITLE: Doom Emacs Config

* Table of Contents :toc:
- [[#about][About]]
- [[#config][Config]]
  - [[#c][C++]]
  - [[#company][Company]]
  - [[#debug-adapter-protocol][Debug Adapter Protocol]]
  - [[#dired][Dired]]
  - [[#doom-theme][Doom Theme]]
  - [[#elcord][Elcord]]
  - [[#emojis][Emojis]]
  - [[#eww][EWW]]
  - [[#fonts][Fonts]]
  - [[#javascripttypescript][JavaScript/TypeScript]]
  - [[#language-server-protocol][Language Server Protocol]]
  - [[#latex][LaTeX]]
  - [[#line-settings][Line Settings]]
  - [[#mu4e][MU4E]]
  - [[#mouse-support][Mouse Support]]
  - [[#open-links-in-browser][Open Links in Browser]]
  - [[#org-alert][Org Alert]]
  - [[#org-auto-tangle][Org Auto Tangle]]
  - [[#org-mode][Org Mode]]
  - [[#org-tree-slide][Org Tree Slide]]
  - [[#workspaces][Workspaces]]
- [[#init][Init]]
  - [[#information][Information]]
  - [[#input][Input]]
  - [[#completion][Completion]]
  - [[#ui][UI]]
  - [[#editor][Editor]]
  - [[#emacs][Emacs]]
  - [[#term][Term]]
  - [[#checkers][Checkers]]
  - [[#tools][Tools]]
  - [[#os][OS]]
  - [[#lang][Lang]]
  - [[#email][Email]]
  - [[#app][App]]
  - [[#config-1][Config]]
  - [[#other][Other]]
- [[#packages][Packages]]

* About
This is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that uses the "evil" keybindings (Vim keybindings) and includes a number of nice extensions and bit of configuration out of the box.

* Config
:PROPERTIES:
:header-args: :tangle config.el
:END:

These are the contents of the *config.el* file.

** C++
Some extra settings to auto-set compile commands for C++.
(Also will need to install clangd, gdb, and mono to have everything working correctly)

#+begin_src emacs-lisp
(add-hook 'c++-mode-hook
  (lambda ()
    (if buffer-file-name
      (let* ((src (file-name-nondirectory (buffer-file-name)))
             (exe (file-name-sans-extension src)))
        (setq-local compile-command (concat "make " exe " && timeout 1s ./" exe))
))))

(after! lsp-clangd
  (setq lsp-clients-clangd-args
        '("-j=3"
          "--background-index"
          "--clang-tidy"
          "--completion-style=detailed"
          "--header-insertion=iwyu"
          "--header-insertion-decorators=0"))
  (set-lsp-priority! 'clangd 2))
#+end_src

** Company
Company is used for auto-completion in Emacs. These are some settings I use for Company.

#+begin_src emacs-lisp
(setq company-selection-wrap-around t)

;; Have snippets come up before keywords
(setq +lsp-company-backends '(:separate company-yasnippet company-capf))

(after! company
  (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
  (define-key company-active-map (kbd "TAB") 'company-complete-selection)
  (define-key company-active-map (kbd "C-SPC") 'company-abort)
  (define-key company-active-map (kbd "RET") nil)
  (define-key company-active-map (kbd "<return>") nil)

  (company-prescient-mode 1))
#+end_src

** Debug Adapter Protocol
These are settings for the Debug Adapter Protocol also known as dap-mode that works with LSP to create a seamless IDE experience

| Command                      | Description                              | Keybinding |
|------------------------------+------------------------------------------+------------|
| dap-next                     | /Go to next line/                          | SPC-d-n    |
| dap-step-in                  | /Step into function/                       | SPC-d-i    |
| dap-step-out                 | /Step out of function/                     | SPC-d-o    |
| dap-continue                 | /Continue until next breakpoint/           | SPC-d-c    |
| dap-hydra                    | /Enable hydra mode/                        | SPC-d-h    |
| dap-debug                    | /Start debugger/                           | SPC-d-s    |
| dap-debug-restart            | /Restart debugger/                         | SPC-d-r    |
| dap-disconnect               | /Stop debugger/                            | SPC-d-k    |
| dap-delete-all-sessions      | /Kill all dap sessions/                    | SPC-d-K    |
| dap-debug-recent             | /Start debugger with recent configuration/ | SPC-d-d-r  |
| dap-debug-last               | /Start debugger with last configuration/   | SPC-d-d-l  |
| dap-eval                     | /Eval string/                              | SPC-d-e-e  |
| dap-eval-region              | /Eval region string/                       | SPC-d-e-r  |
| dap-eval-thing-at-point      | /Eval symbol on cursor/                    | SPC-d-e-s  |
| dap-ui-expressions-add       | /Add expression/                           | SPC-d-e-a  |
| dap-ui-expressions-remove    | /Remove expression/                        | SPC-d-e-d  |
| dap-breakpoint-toggle        | /Toggle breakpoint on cursor/              | SPC-d-b-b  |
| dap-breakpoint-condition     | /Set condition for breakpoint/             | SPC-d-b-c  |
| dap-breakpoint-hit-condition | /Set hit count for breakpoint/             | SPC-d-b-h  |
| dap-breakpoint-log-message   | /Set log message for breakpoint/           | SPC-d-b-l  |

#+begin_src emacs-lisp
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"                "n" #'dap-next
      :desc "dap step in"             "i" #'dap-step-in
      :desc "dap step out"            "o" #'dap-step-out
      :desc "dap continue"            "c" #'dap-continue
      :desc "dap hydra"               "h" #'dap-hydra
      :desc "dap debug"               "s" #'dap-debug
      :desc "dap debug restart"       "r" #'dap-debug-restart
      :desc "dap disconnect"          "k" #'dap-disconnect
      :desc "dap delete all sessions" "K" #'dap-delete-all-sessions

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent" "r" #'dap-debug-recent
      :desc "dap debug last"   "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)

(after! dap-mode
  (setq dap-python-debugger 'debugpy)
  (require 'dap-netcore)

  (require 'dap-codelldb)
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  (dap-register-debug-template
   "LLDB::Run C++"
   (list :type "lldb"
         :request "launch"
         :name "LLDB::Run C++"
         :miDebuggerPath "/usr/bin/lldb-mi"
         :cwd "${workspaceFolder}"
         :program "${fileDirname}/${fileBasenameNoExtension}"))
  (dap-register-debug-template
   "LLDB::Run Rust"
   (list :type "lldb"
         :request "launch"
         :name "LLDB::Run Rust"
         :miDebuggerPath "~/.cargo/bin/rust-lldb"
         :cwd "${workspaceFolder}"
         :program "${workspaceFolder}/target/debug/${fileBasenameNoExtension}"))
)
#+end_src

** Dired
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

| Command                 | Description                                 | Keybinding |
|-------------------------+---------------------------------------------+------------|
| dired-up-directory      | /Go up in directory tree/                     | h          |
| dired-find-file         | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line         | /Move down to next line/                      | j          |
| dired-previous-line     | /Move up to previous line/                    | k          |
| dired-mark              | /Mark file at point/                          | m          |
| dired-unmark            | /Unmark file at point/                        | u          |
| dired-do-copy           | /Copy current file or marked files/           | C          |
| dired-do-rename         | /Rename current file or marked files/         | R          |
| dired-hide-details      | /Toggle detailed listings on/off/             | (          |
| dired-git-info-mode     | /Toggle git information on/off/               | )          |
| dired-create-directory  | /Create new empty directory/                  | +          |
| dired-diff              | /Compare file at point with another/          | =          |
| dired-subtree-toggle    | /Toggle viewing subtree at point/             | TAB        |
| dired-mark-files-regexp | /Mark files using regex/                      | % m        |
| dired-do-copy-regexp    | /Copy files using regex/                      | % C        |
| dired-do-rename-regexp  | /Rename files using regex/                    | % R        |
| dired-mark-files-regexp | /Mark all files using regex/                  | * %        |
| dired-do-chgrp          | /Change the group of marked files/            | g G        |
| dired-do-chmod          | /Change the mode of marked files/             | M          |
| dired-do-chown          | /Change the owner of marked files/            | O          |
| dired-do-rename         | /Rename file or all marked files/             | R          |

#+begin_src emacs-lisp
(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'nsxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "nsxiv")
                              ("jpg" . "nsxiv")
                              ("png" . "nsxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Doom Theme
Setting the theme to doom-one.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

** Elcord

#+begin_src emacs-lisp
(add-hook 'after-make-frame-functions
  (lambda (frame) (elcord-mode 1)))
(add-hook 'after-delete-frame-functions
  (lambda (frame)
    (if (eq (- (length (visible-frame-list)) 1) 0) (elcord-mode 0))))

(setq elcord-editor-icon "emacs_icon")
#+end_src

** Emojis
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
(use-package! emojify
  :hook (after-init . global-emojify-mode))
#+end_src

** EWW
EWW is the Emacs Web Wowser, the builtin browser in Emacs.  Below I set urls to open in a specific browser (eww) with browse-url-browser-function.  By default, Doom Emacs does not use ‘SPC e’ for anything, so I choose to use the format ‘SPC e’ plus ‘key’ for these (I also use ‘SPC e’ for ‘eval’ keybindings).  I chose to use ‘SPC s w’ for eww-search-words because Doom Emacs uses ‘SPC s’ for ‘search’ commands.

#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Search web for text between BEG/END"
      "s w" #'eww-search-words
      (:prefix ("e" . "evaluate/EWW")
       :desc "Eww web browser" "w" #'eww
       :desc "Eww reload page" "R" #'eww-reload))
#+end_src

** Fonts

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Avenir Next LT Pro" :size 17)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24)
      mixed-pitch-set-height t)
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
(add-hook 'text-mode-hook 'mixed-pitch-mode)
#+end_src

** JavaScript/TypeScript
These are some settings for javascript/typescript. I'm disabling lsp formatting (because ts-ls formatting isn't good) to use prettier instead. Also, I'm disabling the built-in ligatures to use the ones supplied by the font.

#+begin_src emacs-lisp
(setq-hook! 'rjsx-mode-hook +format-with-lsp nil)
(setq-hook! 'typescript-mode-hook +format-with-lsp nil)

(after! js
  (setq-default js--prettify-symbols-alist '()))
#+end_src

** Language Server Protocol
Configuration for LSP

#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-ui-peek-always-show t)
  (setq lsp-inlay-hint-enable t))
#+end_src

** LaTeX

#+begin_src emacs-lisp
(after! ox-latex
  (add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** Line Settings
I set comment-line to ‘SPC TAB TAB’.  The standard Emacs keybinding for comment-line is ‘C-x C-;’.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses ‘SPC t’ for “toggle” commands, so I choose ‘SPC t’ plus ‘key’ for those bindings.

| Command                  | Description                                | Keybinding  |
|--------------------------+--------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/               | SPC TAB TAB |
| hl-line-mode             | /Toggle line higlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/        | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                      | SPC t l     |
| toggle-truncate-lines    | /Toggle truncate lines/                    | SPC t t     |

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(pixel-scroll-precision-mode 1)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))
#+end_src

** MU4E
Setting up mu4e which is an email client that works within emacs.  You must install mu4e and mbsync through your Linux distribution’s package manager. Setting up smtp for sending mail. Make sure the gnutls command line utils are installed. Package ‘gnutls-bin’ in Debian/Ubuntu, and ‘gnutls’ in Arch.

*** Setting Up Multiple Accounts
The settings below are specific to each of three different email accounts.  These settings are fictional and are here for documentation purposes.  Hence, I have this source block entirely commented out.  Now, I do use a source code block similar to the one below, but I don’t want to share it publicly.  Keep reading to see how I handle this.

#+begin_src emacs-lisp
;; (defvar my-mu4e-account-alist
;;   '(("acc1-domain"
;;      (mu4e-sent-folder "/acc1-domain/Sent")
;;      (mu4e-drafts-folder "/acc1-domain/Drafts")
;;      (mu4e-trash-folder "/acc1-domain/Trash")
;;      (mu4e-compose-signature
;;        (concat
;;          "Ricky Bobby\n"
;;          "acc1@domain.com\n"))
;;      (user-mail-address "acc1@domain.com")
;;      (smtpmail-default-smtp-server "smtp.domain.com")
;;      (smtpmail-smtp-server "smtp.domain.com")
;;      (smtpmail-smtp-user "acc1@domain.com")
;;      (smtpmail-stream-type starttls)
;;      (smtpmail-smtp-service 587))
;;     ("acc2-domain"
;;      (mu4e-sent-folder "/acc2-domain/Sent")
;;      (mu4e-drafts-folder "/acc2-domain/Drafts")
;;      (mu4e-trash-folder "/acc2-domain/Trash")
;;      (mu4e-compose-signature
;;        (concat
;;          "Suzy Q\n"
;;          "acc2@domain.com\n"))
;;      (user-mail-address "acc2@domain.com")
;;      (smtpmail-default-smtp-server "smtp.domain.com")
;;      (smtpmail-smtp-server "smtp.domain.com")
;;      (smtpmail-smtp-user "acc2@domain.com")
;;      (smtpmail-stream-type starttls)
;;      (smtpmail-smtp-service 587))
;;     ("acc3-domain"
;;      (mu4e-sent-folder "/acc3-domain/Sent")
;;      (mu4e-drafts-folder "/acc3-domain/Drafts")
;;      (mu4e-trash-folder "/acc3-domain/Trash")
;;      (mu4e-compose-signature
;;        (concat
;;          "John Boy\n"
;;          "acc3@domain.com\n"))
;;      (user-mail-address "acc3@domain.com")
;;      (smtpmail-default-smtp-server "smtp.domain.com")
;;      (smtpmail-smtp-server "smtp.domain.com")
;;      (smtpmail-smtp-user "acc3@domain.com")
;;      (smtpmail-stream-type starttls)
;;      (smtpmail-smtp-service 587))))
#+end_src

I’m sourcing an elisp file (~/.config/doom/email.el) that contains the above source block but with my actual email settings.  I do this so I don’t have to share my email addresses publicly.  If you uncommented the above source block to use, then you should comment out or delete this line below.

#+begin_src emacs-lisp
(load "~/.config/doom/email.el")
#+end_src

*** Function To Facilitate Switching Between Accounts
The following function can be used to select an account. This function is then added to mu4e-compose-pre-hook.

#+begin_src emacs-lisp
(defun my-mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                my-mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

(add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
#+end_src

*** Org-Msg
This extension makes it possible to use org mode when composing emails in mu4e.

#+begin_src emacs-lisp
(setq org-msg-signature "
      Regards,

   #+begin_signature
   -- *{your-name}* \\\\
   /Sent from my Emacs/
   #+end_signature")
#+end_src

*** Extra Settings
These are some extra settings for mu4e for convenience.

#+begin_src emacs-lisp
(after! mu4e
  (setq mu4e-update-interval (* 5 60)                       ;; get emails and index every 5 minutes
    mu4e-get-mail-command "mbsync -a -c ~/.config/mbsyncrc" ;; set a custom sync command
    mu4e-compose-format-flowed t                            ;; send emails with format=flowed
    mu4e-index-cleanup nil                                  ;; don't do a full cleanup check
    mu4e-index-lazy-check t))                               ;; don't consider up-to-date dirs

(mu4e t)        ;; check for emails in the background
#+end_src

** Mouse Support
Adding mouse support in the terminal version of Emacs.

#+begin_src emacs-lisp
(xterm-mouse-mode 1)
#+end_src

** Open Links in Browser
This opens any link clicked in emacs in the browser specified below.

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-generic-program "xdg-open")
#+end_src

** Org Alert
#+begin_src emacs-lisp
(use-package! org-alert
  :config
  (setq alert-default-style 'libnotify
        org-alert-interval 300
        org-alert-notification-title "Org Alert Reminder!"
        org-alert-notify-cutoff 10
        org-alert-notify-after-event-cutoff 10)
  (org-alert-enable))
#+end_src

** Org Auto Tangle
#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Org Mode
I wrapped most of this block in (after! org).  Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom’s defaults.

#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/nc/Notes/"
        org-agenda-files (directory-files-recursively "~/nc/Notes/agenda/" "\\.org$")
        org-log-done 'time
        org-hide-emphasis-markers t))
#+end_src

*** Set font sizes for each header level
You can set the Org heading levels to be different font sizes.  So I choose to have level 1 headings to be 140% in height, level 2 to be 130%, etc.  Other interesting things you could play with include adding :foreground color and/or :background color if you want to override the theme colors.

#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)
#+end_src

** Org Tree Slide
These are some settings for Org Tree Slide, a mode for making org files into presentations.

#+begin_src emacs-lisp
(after! org-tree-slide
  (advice-remove 'org-tree-slide--display-tree-with-narrow
                 #'+org-present--hide-first-heading-maybe-a)
  (setq-local cwm-frame-internal-border 100)
  (org-tree-slide-presentation-profile))
#+end_src

** Workspaces
Prevent a new workspace from being created whenever opening emacs with emacsclient

#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

* Init
:PROPERTIES:
:header-args: :tangle init.el
:END:

These are the contents of the *init.el* file.

** Information

#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

** Input

#+begin_src emacs-lisp
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src

** Completion

#+begin_src emacs-lisp
       :completion
       (company +childframe)           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +childframe +icons)           ; the search engine of the future
#+end_src

** UI

#+begin_src emacs-lisp
       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       (treemacs +lsp)          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing
#+end_src

** Editor

#+begin_src emacs-lisp
       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)            ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent
#+end_src

** Emacs

#+begin_src emacs-lisp
       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

** Term

#+begin_src emacs-lisp
       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs
#+end_src

** Checkers
#+begin_src emacs-lisp
       :checkers
       syntax              ; tasing you for every semicolon you forget
       spell               ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make
#+end_src

** Tools

#+begin_src emacs-lisp
       :tools
       ;;ansible
       (debugger +lsp)          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup +dictionary)              ; navigate your code and its documentation
       (lsp +peek)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       (pass +auth)              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter
       ;;upload            ; map local to remote projects via ssh/ftp
#+end_src

** OS

#+begin_src emacs-lisp
       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience
#+end_src

** Lang

#+begin_src emacs-lisp
       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp +tree-sitter)                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       (csharp +dotnet +lsp +tree-sitter)            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       (dart +flutter +lsp)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (haskell +lsp +tree-sitter)           ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp +tree-sitter)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex +cdlatex)             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +dragndrop +pandoc +present +pretty)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp +pyright +tree-sitter)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp +tree-sitter)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp +tree-sitter)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler
#+end_src

** Email

#+begin_src emacs-lisp
       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)
#+end_src

** App

#+begin_src emacs-lisp
       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

** Config

#+begin_src emacs-lisp
       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

** Other
These are some settings that need to be set before any modules are set
#+begin_src emacs-lisp
(setq evil-respect-visual-line-mode t)
#+end_src

* Packages
:PROPERTIES:
:header-args: :tangle packages.el
:END:

These are the contents of the *packages.el* file.

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src

#+begin_src emacs-lisp
(package! company-prescient)
(package! elcord)
(package! emojify)
(package! evil-tutor)
(package! org-alert)
(package! org-auto-tangle)
#+end_src
